0 -> false

ANY other number (incl. negative numbers) -> true

"" (empty string) -> false

ANY other non-empty string (incl. "false") -> true

(),[] & all other objects or arrays -> true

null, undefined, Nan -> false




BOOLEAN TRICKS

!! -> return real boolean value
e.g. !!"" -> false
e.g. !!1 -> true

|| -> assign default value if condition is falsy
    e.g. const name = someInput || 'Max'
    -> if someInput is falsy, name = 'Max'

&& -> if cond is true via AND operator
    e.g. const name = isLoggedIn && 'Max'
    -> if isLoggedIn true, then name = 'Max'

const userInput = "";
const isValidInput = !!userInput

isValidInput = false
!!userInput = false
!userInput = true

LOOPS

for loop
e.g.
for (let i=0;i<3;i++){
    console.log(i);
}

for-of loop -> ARRAY
e.g.
for (const x of array){
    console.log(x);
}

for-in loop -> OBJECT
e.g.
for (const key in object){
    console.log(key);
    console.log(object)[key];
}

while loop
e.g.
while(isLoggedIn){
    ...
}

break; -> stops a loop
continue; -> passes a certain part of the loop

var -> Global/Function
let & const -> Block

'use strict'; -> enables strict mode


////
function greet(name) {
    console.log(name);
}

greet('Ivan');

*name is a parameter
*'Ivan' is the argument
////

const person = {
    name: 'Ivan',
    greet: function greet(){
        console.log('Hello!');
    }
}

person.greet();

methods are functions inside objects.

*functions are objects too

////

Declaring functions as constants are better to initialize and better to read

const start = function(){
    console.log('Hi!');
};

function start() {
    console.log('Hi!');
}

////
ARROW FUNCTIONS - creates new tricks on creating functions

const add = (a, b) => a + b;

is the same as

const add = function () {
    return a + b;
}

General Syntax: (arg1,arg2) => { ... }

no arguments/parameters
() => { ... }
empty parentheses is required 

exactly 1 arg/parameter
arg => { ... }
parentheses can be omitted



exacty 1 expression
(a,b) => a + b
curly braces can be ommited, result is returned, remove 'return'

more than one expression in function body
(a, b) => {
    a *= 2;
    return a + b;
}
curly braces and return is required

///
REST OPERATOR

const sumUp = (a, b, ...numbers) => { //MERGING ALL ARGUMENTS INTO AN ARRAY
  let sum = 0;
  for (const num of numbers) {
    sum += num;
  }
  return sum
};

*You can add parameter in front of the rest operator to exclude them from the array

before rest operators

const subtractUp = function () { 
  let sum = 0;
  for (const num of arguments) { // dont use that pre ES6
    sum -= num;
  }
  return sum
};

*if using the 'function ()' expression method using the word 'arguments' anywhere in the function yields the same array-like properties from rest operators

const sum = sumUp(1, 5, 10, -3, 6, 10);
console.log(sum);

const sub = subtractUp(1, 5, 10, -3, 6, 10);
console.log(sumb);
